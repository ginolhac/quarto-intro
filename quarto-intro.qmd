---
title: "Quarto introduction"
subtitle: "Literate programming"
date: "2024-11-14"
date-format: "dddd, [the] D[<sup style='font-size:65%;font-style:italic;'>th</sup>] [of] MMMM, YYYY"
institute: "University of Luxembourg"
author: "Aurélien Ginolhac, DLSM"
image: img/lit_prog_quarto.png
format:
  unilu-theme-revealjs:
    logo_url: https://ginolhac.github.io/quarto-intro/
revealjs-plugins:
  - pointer
  - drop
from: markdown+emoji
title-slide-attributes: 
  data-background-image: img/lit_prog_quarto.png
  data-background-position: "50% 10%"
  data-background-size: "280px"
embed-resources: true
---

## This presentation


:::{.callout-tip icon=false .incremental}
## Quarto: an open-source scientific and technical publishing system


- What is literate programming
- Learn about the different possibilities:
    + Documents and reports
    + Presentations
        + This one, [{{< fa brands github >}} code](https://github.com/ginolhac/quarto-intro/), : rendered: [https://ginolhac.github.io/quarto-intro/](https://ginolhac.github.io/quarto-intro/)
    + Websites and blogs
    + Dashboards
    + Books
    + Manuscripts
- Render to the output format you want
- Outsource rendering with Continuous Integration/Development (CI/CD)
    + {{< fa brands github >}} Actions (this [presentation](https://github.com/ginolhac/quarto-intro/actions))
    + {{< fa brands square-gitlab >}} CI/CD

:::


## 


::: {.huge}
>**Literate programming** is the practice of [mixing]{.green} code and descriptive writing in order to execute and explain a [data analysis]{.green} **simultaneously in the same document**.


— _William Landau_ Developer of `{targets}`
:::

</br>

::: {.fragment}
For a bioinformatician, pure programming is barely happening, we need reports/websites where [**content**]{.green} and formatting are disconnected 
:::

::: {.fragment}
Even better to separate [**content**]{.green} and **rendering**, outsourced to continuous integration/development.
:::

::: {.footer}
Source: [{targets} user manual](https://books.ropensci.org/targets/literate-programming.html)
:::



## Rmarkdown

Predecessor of Quarto. 

Version 1 in 2016, the idea was to have text and code in one document, execute {{< fa brands r-project >}} code and let the final **markdown** converted to different formats by [`pandoc`](https://pandoc.org/).


:::: {.columns .fragment}
::: {.column width="70%"}

![](img/markdown_hedgehog.png){fig-align="center"}
:::
::: {.column width="30%"}
**Jupyter notebook** were also exploring the same concept.
Rendering order led sometimes to [some frustration](https://www.youtube.com/watch?v=7jiPeIFXb6U)

:::
::::


::: footer
Credit: Artwork by [Allison Horst](https://github.com/allisonhorst)
:::

## Markdown

- **Lightweight** markup language with a simple syntax

::::: {.columns}
:::: {.column width="50%"}

### HTML 

``` html
<!DOCTYPE html>
<html>
<body>

<h1>This is a heading</h1>

<p>This is some text in a <b>paragraph</b></p>

<h2>This is a second level heading</h2>

<ul>
<li><a href="http://exa.com"><code>site</code></a>
<li><img src="https://images.computerhistory.org/revonline/images/500004391-03-01.jpg?w=200">
</ul>
</body>
</html>
```

::::
:::: {.column width="50%" .fragment}

### Markdown equivalent

``` markdown
# This is a heading

This is some text in a **paragraph**

## This is a second level heading

- [`site`](http://exa.com)
- ![](https://images.computerhistory.org/revonline/images/500004391-03-01.jpg?w=200)
```

![Two Tux and Linus](img/linus-tux.png){.fragment}

::::
:::::

::: {.footer}
See [author markdown guide](https://quarto.org/docs/authoring/markdown-basics.html#text-formatting)
:::

## Quarto 

Extended Rmarkdown. Languages and **Integrated Development Environment** agnostic

:::: {.columns}
::: {.column width="20%"}
![](img/lit_prog_quarto_ide.png)

![Positron](dlsm-bioinfo/positron-logo.png){width=100 fig-align="left"}

:::
::: {.column width="80%"}
![](img/lit_prog_horst_quarto_schematic.png)
:::

::::

## Why use **Quarto** ?

- Write detailed analyses that render to beautiful reports
- Ensure reproducibility
- Mix programming languages (passing along variables)
- Excellent [documentation](https://quarto.org/docs)
- Export a single (`.qmd`) document to various formats (PDF, HTML...)
- Many [extensions](https://m.canouil.dev/quarto-extensions/extensions.html)
- Text file that can (should) be tracked by a version control system (like {{< fa code-branch >}} [git](https://git-scm.com/))




## Quarto pipeline

[![](img/lit_prog_horst_qmd_render_schema.png)]{fig-align="center"}

- Recently, [native Julia engine](https://quarto.org/docs/computations/julia.html#using-the-julia-engine)

```` markdown
---
title: "A julia engine notebook"
engine: julia
---

```{{julia}}
1 + 2
```
````

## Computation

:::::{.columns}
::::{.column width="33%"}

- In a fresh and clean session
- **Chunks** are **evaluated**
- Sequentially from top to bottom

::::

::::{.column width="33%"}

### Example for `knitr`

- Extracts {{< fa brands r-project >}} chunks
- Interpret/Run them
- Formats results as markdown
- Re-inject in the document (MD)

::::

::::{.column width="33%"}
### [Pandoc]((http://pandoc.org/))
- Converts markdown to the desired document 
  * PDF
  * HTML
  * Word
  * EPUB
  * ...
::::
:::::

## Quarto document: Structure {.scrollable}


::::: {.columns}
:::: {.column width="45%"}

![](img/lit_prog_struct.svg)

::::

::::{.column width="45%"}

:::{.callout-important icon=false}
## YAML header
- Document common variables:
  + title, date, author, ...
- Define **format** and its specific options
- Use {{< kbd Tab >}} for autocompletion
:::

:::{.callout-note icon=false}
## Free text in Markdown

- Markdown syntax to write your descriptions, remarks
- Literate programming
:::


:::{.callout-tip icon=false}
## Code chunks
Code to be interpreted

- `knitr` for {{< fa brands r-project >}}
- `jupyter` for {{< fa brands python >}}
-  `QuartoNotebookRunner.jl` package for `julia`
- native support for `Observable`
- Outputs (tables/plots) are inserted below each
:::


::::
:::::



## Popular output formats


:::::{.columns}
::::{.column width="33%"}

### HTML

- Fast rendering
- No need for extra install


::: {.callout-important}
## Default is NOT standalone

Use format option to obtain a self contained HTML

``` yaml
---
format:
  html:
    embed-resources: true
---
```

:::

::::

::::{.column width="33%" .fragment}
### PDF

- Single file
- Requires $\LaTeX$
  
:::{.callout-tip}
## [Typst](https://github.com/typst/typst) new [format](https://quarto.org/docs/output-formats/typst.html) for {{< fa file-pdf >}}

- Fast!
- No need for $\LaTeX$
:::
::::

::::{.column width="33%" .fragment}

### Word (`docx`)

- Widely used
- Editable
- **Collaborate** with people not using Quarto

::::
:::::


## Output examples 1/2  {.scrollable}

:::: {.columns}
::: {.column width="50%"}
### HTML
![](img/literate_prog_html.png)

:::
::: {.column width="50%"}
### Word

![](img/literate_prog_docx.png)
:::
::::

## Output examples {{< fa file-pdf >}} 2/2 {.scrollable}

:::: {.columns}
::: {.column width="50%"}
### Typst
![](img/literate_prog_pdf.png)

:::
::: {.column width="50%"}
### PDF (LaTex)

![](img/literate_prog_typst.png)
:::
::::



## Equations using $\LaTeX$ syntax

::::: {.columns}
:::: {.column width="45%"}
:::{.callout-tip icon=false}
## How to add equations

 * Enclose in `$` for in-line equations
 * `$a^2+b^2=c^2$` renders as $a^2+b^2=c^2$.

 * Double (`$$`) for separate equations.
```
$$G_{\mu v}=8 \pi G (T_{\mu v} + \rho _\Lambda \ g_{\mu v}) $$
```

renders as:

$$G_{\mu v}=8 \pi G (T_{\mu v} + \rho _\Lambda \ g_{\mu v})$$

:::
::::

:::::


## Reports


:::: {.columns}
::: {.column width="40%"}
- Automatic Table of content
- Author metadata (affiliation, {{< fa envelope >}}, {{< fa brands orcid >}})
- Here HTML output, but PDF is only one variable modification away
:::
::: {.column width="60%"}

![](img/dagmar-report.png){fig-align="center"}
:::
::::


## YAML config file


:::: {.columns}
::: {.column width="40%"}
- Mandatory name: `_quarto.yml`, at project root
- Target of `quarto render`
- To configure:
    + Books
    + Websites
    + Manuscripts
:::
::: {.column width="60%" .fragment}
``` {.yaml filename="_quarto.yml"}
project:
  type: website
  render:
    - "*.qmd"
    - "!resources/"
    - "!data/"

execute:
  freeze: auto  # re-render only when source changes

website:
  title: "bulk RNA-seq"
  site-url: https://misb.pages.uni.lu/rna-seq
  image: img/visualization.png
  description: "Snakemake dependency graph"
  search:
    location: navbar
    type: overlay
  navbar:
    background: light
    logo: img/visualization.png
    left:
      - file: index.qmd
        text: "{{< fa house >}}"
      - file: slides.qmd
        text: "{{< fa graduation-cap >}} Lectures"
      - file: practicals.qmd
        text: "{{< fa desktop >}} Practicals"
      - file: setup.qmd
        text: "{{< fa screwdriver-wrench >}} Setup tutorial"
      - file: exams.qmd
        text: "{{< fa graduation-cap >}} Exams"
    right:
      - file: about.qmd
        text: "{{< fa question-circle >}} About"
  page-footer:
    left: |
      All content licensed under a {{< fa brands creative-commons >}}
      {{< fa brands creative-commons-by >}} {{< fa brands creative-commons-nc >}} except for _source:_ statements.
    center: "Copyright © [Université du Luxembourg](https://www.uni.lu/) 2024. All rights reserved."
    right:
      - icon: facebook
        href: https://www.facebook.com/uni.lu
      - icon: linkedin
        href: https://www.linkedin.com/school/166650
      - icon: instagram
        href: https://www.instagram.com/uni.lu
      - icon: youtube
        href: https://www.youtube.com/user/luxuni
    border: true

format:
  html:
    page-layout: article
    code-block-border-left: true
    code-block-bg: true
    code-copy: true
    code-link: false # requires pkg downlit
    theme:
      light: cosmo
      dark: [cosmo, theme-dark.scss]
    fontsize: 1.2em
    css: styles.css
    toc: true
    lang: en
    date-format: long
    highlight-style: atom-one
```
:::
::::

## Website example

With previous `_quarto.yml` and some CSS tweaks. Grid listing

![](img/rna-seq-www.png){fig-align="center"}

## Websites

:::: {.columns}
::: {.column width="40%"}

- Extensive use for teaching
- Building and deployment via Continuous Integration (CI)
    + Gitlab {{< fa brands gitlab >}}
    + GitHub {{< fa brands github >}}
- Automatic listing pages, search engine, navigation bar and smart caching
- Demo using the [BASV53](https://basv53.uni.lu)
    + Table listings

:::
::: {.column width="60%"}
![](img/website-basv53.png){fig-align="center"}

:::
::::


## Books

:::: {.columns}
::: {.column width="30%"}
- Bundle large chapters into a website
    + Chapters on the left
    + ToC on the right
- Quarto [docs](https://quarto.org/docs) are one
- Exports to PDF / EPUB etc...
:::
::: {.column width="70%"}
![](img/targets-book.png){fig-align="center"}
:::
::::


## Dashboards

- Nice alternative to `shiny` apps (using CI scheduled pipelines)
- Demo using the [labbook timeline of bioinfo](https://uniluxembourg.gitlab.io/fstm/dlsm/bioinfo/labbook-dashboard/)

![](img/labbook-dashboard.png){fig-align="center"}


## Demo simple Quarto doc in VScode

:::: {.columns}
::: {.column width="50%"}
### Minimal header
``` yaml
---
format: html
---
```
:::
::: {.column width="50%"}
### 
``` yaml
---
format: pdf
title: Bioinfo DLSM team 2024
author: Aurélien Ginolhac
date: today
execute: 
  echo: false
---
```
:::
::::

## Quarto Manuscripts

:::: {.columns}
::: {.column width="50%"}

### Command-line

``` bash
❯ quarto create project manuscript dlsm-bioinfo
? Title (dlsm-bioinfo) › Services of the bioinfo DLSM team
Creating project at DLSM/Seminars/2024-quarto-intro/dlsm-bioinfo:
  - Created _quarto.yml
  - Created .gitignore
  - Created index.qmd
  - Created references.bib
```
:::
::: {.column width="50%" .fragment}

### Outcome

``` bash
❯ tree dlsm-bioinfo/
dlsm-bioinfo/
├── dlsm-bioinfo.Rproj
├── index.qmd
├── _quarto.yml
└── references.bib

1 directory, 4 files
```
:::
::::

## PLoS template

Command to add an extensions among many [available](https://m.canouil.dev/quarto-extensions/extensions.html) (+165 references)

``` bash
quarto add quarto-journals/plos
```


![](img/quarto-ext-journals.png){fig-align="center"}

## Quarto Manuscripts, example

:::: {.columns}
::: {.column width="40%"}
``` bash
dlsm-bioinfo/
├── bioinfo.qmd
├── dag-atac-seq.png
├── dag-rna-seq.png
├── insert-citation.png
├── orbi-bib-export.png
├── _extensions
│   └── quarto-journals
│       └── plos/
├── gaigneaux.bib
├── ginolhac.bib
├── references.bib
├── plos2015.bst <- bib style
├── _manuscript/ <- outputs
└── _quarto.yml  <- main config

```
Demo HTML output

:::
::: {.column width="60%" .fragment}
PLoS PDF example:
![](dlsm-bioinfo/pdf-plos.png)
:::
::::


## Branding


:::: {.columns}
::: {.column width="50%"}
- In [pre-release v1.6 Quarto](https://prerelease.quarto.org/docs/authoring/brand.html) using `_brand.yml`
- Same config for all format
``` {.yaml filename="_brand.yml"}
color:
  palette:
    dark-grey: "#222222"
    blue: "#ddeaf1"
  background: blue
  foreground: dark-grey
  primary: black

logo: 
  medium: logo.png

typography:
  fonts:
    - family: Jura
      source: google
  base: Jura
  headings: Jura
```
:::
::: {.column width="50%"}
![](img/branding1.png)
![](img/branding2.png)
:::
::::


## Quarto extensions

:::: {.columns}
::: {.column width="50%"}
- We saw already some examples
    + PLoS format
    + This [unilu-theme](https://github.com/ginolhac/unilu-theme)
    + Pointer (press {{< kbd q >}})
:::
::: {.column width="50%" .fragment}
Compiled [here](https://m.canouil.dev/quarto-extensions/)
![](img/quarto-extensions.png)
:::
::::

## Quarto [Drop](https://github.com/r-wasm/quarto-drop): a console in your browser

:::: {.columns}
::: {.column width="50%"}

- Add in header:

``` yaml
---
revealjs-plugins:
  - drop
---
```


- Drop a console of [{{< fa brands r-project >}} webR](https://docs.r-wasm.org/) or [{{< fa brands python >}} pyodide](https://pyodide.org/) with {{< kbd ` `  >}} or button.
- Pre-load packages
``` yaml
format:
  revealjs:
    drop:
      engine: webr
      webr:
        packages:
          - ggplot2
          - dplyr
```
:::
::: {.column width="50%" .fragment}
Example:

- `{ggplot2}` gets automatically downloaded

![](img/quarto-drop.png)
:::
::::

## Outsource rendering

:::: {.columns}
::: {.column width="40%"}
::: {.incremental}
- Quarto output files usually rendered on your local machine.
- For HTML files/website, those are **static** files.
- Rendering could be done on **someone else computer** _aka_ the cloud.
- CI/CD (Continuous Integration/Continuous Deployment) can help
- But you must use `git`, as you do anyway right?
- Two examples:
    + {{< fa brands github >}} GitHub Actions
    + {{< fa brands gitlab >}} Gitlab CI
:::
:::
::: {.column width="50%" .fragment}

![CI description with Docker/git/github](img/ci-scheme.svg)
:::
::::

::: {.footer}
Some icons from [flaticon.com](https://www.flaticon.com/free-icons/), credit to _Valueinvestor_
:::

## GitHub Actions

:::: {.columns}
::: {.column width="50%"}
- Lot of _abstract_ recipes
- Convenient but obscure
- [Quarto actions repo](https://github.com/quarto-dev/quarto-actions)

``` {.yaml filename=".github/workflows/publish.yml"}
on:
  workflow_dispatch:
  push:
    branches: main
name: Quarto Publish
permissions: 
    contents: write
    pages: write
jobs:
  build-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4 
      - name: Set up Quarto
        uses: quarto-dev/quarto-actions/setup@v2
        with:
          version: pre-release
      - uses: r-lib/actions/setup-r@v2
      - uses: r-lib/actions/setup-r-dependencies@v2

      - name: Publish to GitHub Pages (and render)
        uses: quarto-dev/quarto-actions/publish@v2
        with:
          path: quarto-intro.qmd
          target: gh-pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
```
:::
::: {.column width="50%"}
- 3 steps:

![](img/quarto-actions.png)
:::
::::


## Gitlab CI

:::: {.columns}
::: {.column width="50%"}
- More verbose, {{< fa brands docker >}} explicit: own `Dockerfile`

``` {.yaml filename=".gitlab-ci.yml"}
image: alpine:latest

stages:
  - build_image
  - build_site
  - deploy

build docker image:
  stage: build_image
  image: docker:20.10.12-dind
  before_script:
    - docker info
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - 'docker pull $CI_REGISTRY_IMAGE:latest || true'
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA --tag $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    changes:
      - Dockerfile

build_site:
  stage: build_site
  image: $CI_REGISTRY_IMAGE:latest
  cache:
    key: $CI_JOB_NAME
    paths:
      - _freeze/
      - _site/
  artifacts:
    name: "$CI_JOB_NAME"
    expire_in: 2 days
    paths:
      - _site/
  before_script:
    # https://mastodon.social/@eddelbuettel/111693310455494722
    - |
      Rscript -e "read.dcf('DESCRIPTION', 'Imports') |> 
        tools:::.split_dependencies() |> 
        names() |> 
        setdiff(tools:::.get_standard_package_names()$base) |> 
        install.packages()"
  script:
    - quarto render
  when: always

Deploy to BASV53:
  stage: deploy
  only:
    - main
  dependencies:
    - build_site
  before_script:
    - 'which ssh-agent || ( apk add --update openssh )'
    - eval $(ssh-agent -s)
    - 'which rsync || ( apk add --update rsync )'
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - 'echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - rsync -azh -e "ssh -p 8022" --delete --filter 'protect /preview' $CI_PROJECT_DIR/_site/ $SSH_HOST:/var/www/basv53/

```
:::
::: {.column width="50%" .fragment}
![](img/gitlab-ci-rna-seq.png)

- Failed pipeline: no deployment as Building site failed.
- Most recent pipeline, I modified `Dockerfile`, thus 3 steps.
:::
::::


## Dockerfile


:::: {.columns}
::: {.column width="70%"}
``` {.yaml filename="Dockerfile"}
FROM rocker/r2u:22.04

RUN  apt-get update && \
  apt-get install -y \
  curl netbase \
  zip git \
  libxml2-dev libcurl4-openssl-dev libmagick++-dev \
  && rm -rf /var/lib/apt/lists/*

RUN install.r tidyverse rmarkdown biobase knitr V8 gt gtextras  ggimage ggrepel ggupset BiocManager && \
  installBioc.r deseq2 apeglm

# from https://quarto.org/docs/get-started/
ARG QUARTO_VERSION="1.6.33"
RUN curl -LO https://github.com/quarto-dev/quarto-cli/releases/download/v${QUARTO_VERSION}/quarto-${QUARTO_VERSION}-linux-amd64.deb && \
    apt-get update -qq && apt-get -y install \
    ./quarto-${QUARTO_VERSION}-linux-amd64.deb && rm quarto-${QUARTO_VERSION}-linux-amd64.deb \
    && apt autoremove -y && apt clean -y && rm -rf /var/lib/apt/lists/*

```
:::
::: {.column width="30%"}

[`r2u`](https://eddelbuettel.github.io/r2u) is awesome, offering {{< fa brands r-project >}} packages as APT.

- **CRAN** as Ubuntu binaries, no compilation
- `{tidyverse}` install is < 10 sec

by [Dirk Eddelbuettel](https://dirk.eddelbuettel.com/)
:::
::::


## Pre/Post render hooks


:::: {.columns}
::: {.column width="50%"}
Tyler Morgan-Wall, author of [`rayshader`](https://www.rayshader.com/)

- Replacing a _Wordpress_ website to **Quarto**

``` {.yaml filename="_quarto.yml"}
project:
  type: website
  pre-render: "echo Let the rendering begin!"
  post-render:
    - "cp -rv posts/images/. _site/posts/images/"
    - "cp -rv posts/videos/. _site/posts/videos/"
    - "Rscript transfer_site.R upload_site"
```
:::
::: {.column width="50%"}
- [Quarto, AI art of Getting Yout Life Back](https://www.youtube.com/watch?v=U8_Dc_ru8fg)

{{< video https://www.youtube.com/watch?v=U8_Dc_ru8fg width="100%" height="350" >}}

:::
[Embed videos](https://quarto.org/docs/authoring/videos.html): 

``` {.default shortcodes="false" code-line-numbers="false"}
{{< video https://www.youtube.com/watch?v=U8_Dc_ru8fg height="350" >}}
```
::::

## Quarto Live

:::: {.columns}
::: {.column width="50%"}
- [Official introduction](https://r-wasm.github.io/quarto-live/)
- `quarto add r-wasm/quarto-live`
- Chunk engine: `{webr}`
- Neat for creating exercises

```` markdown
---
format: live-html
engine: knitr
---

```{{webr}}
for (x in 1:5) {
  print(x ** 2)
}
```

````

::: {.callout-warning}
## Warning
This is a temporary fix for `knitr`:

`{{< include ./_extensions/r-wasm/live/_knitr.qmd >}}`
:::

:::
::: {.column width="50%"}
![](img/quarto-live-webr.gif)
:::
::::


::: {.content-hidden}

ffmpeg -ss 3  -i Screencast.mp4 -vf "fps=10,scale=640:-1:flags=lanczos" -gifflags -transdiff -y quarto-live-webr.gif

:::


## Positron in beta since June 2024

![](img/positron.png){fig-align="center" height=750}


![](https://github.com/posit-dev/ark/raw/main/doc/logo.png){.absolute height="150px" top="1em" right="1em"}

- [Ark](https://github.com/posit-dev/ark) new R kernel written in Rust
- [Data explorer](https://positron.posit.co/data-explorer.html) using [polars](https://pola.rs/) is great

## Before we stop


:::::{.columns}
::::{.column width="55%"}
:::{.callout-tip icon=false}
## Summary

- What is `Quarto` (`qmd`)
- Basic syntax of `Markdown`
- Separate **content** from **rendering**
- `render` to different output formats
:::

:::{.callout-tip icon=false}
## Further reading 📚

- [Quarto](https://quarto.org/)
- [posit::conf(2024) Quarto talks](https://quarto.org/docs/blog/posts/2024-11-06-conf-talks/)
- [Quarto extensions](https://m.canouil.dev/quarto-extensions/extensions.html)
- [Quarto cheatsheet](https://rstudio.github.io/cheatsheets/quarto.pdf)
- [Quarto intro presentation](https://mine.quarto.pub/hello-quarto/#/quarto-next-generation-r-markdown)  by **Mine Cetinkaya-Rundel**
- [Reproducible Medical manuscript](https://prerelease.quarto.org/docs/blog/posts/2024-04-01-manuscripts-rmedicine/) by **Mine Cetinkaya-Rundel**
:::
::::

::::{.column width="45%"}
:::{.callout-note icon=false}
## Acknowledgments  🙏 👏

* Anthoula Gaigneaux
* Eric Koncina


* Mine Cetinkaya-Rundel
* Xie Yihuie
* Hadley Wickham
* Christophe Dervieux
* Artwork by [Allison Horst](https://twitter.com/allison_horst)
* Mickaël Canouil
* Jenny Bryan

:::
</br>

[Thank you for your attention!]{.thanks}
::::
:::::
